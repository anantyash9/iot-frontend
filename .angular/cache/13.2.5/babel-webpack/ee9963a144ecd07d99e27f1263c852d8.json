{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/io.service\";\nimport * as i2 from \"../../services/event.service\";\nexport let TtsComponent = /*#__PURE__*/(() => {\n  class TtsComponent {\n    constructor(ioService, eventService) {\n      this.ioService = ioService;\n      this.eventService = eventService;\n    }\n\n    ngAfterViewInit() {\n      let me = this;\n      me.audioContext = new AudioContext();\n      me.ioService.receiveStream('audio', function (audio) {\n        if (audio) {\n          console.log(\"got audio\");\n          me.playOutput(audio);\n        }\n      }); // me.eventService.audioStopping.subscribe(() => {\n      //   me.stopOutput();\n      // });\n\n      this.textToSpeech();\n    }\n\n    textToSpeech() {\n      let me = this; // iOS Audio hack. - this can only be triggered from a user interaction\n      // create empty buffer to warm up\n\n      let b = me.audioContext.createBuffer(1, 1, 22050);\n      let tempSource = me.audioContext.createBufferSource();\n      tempSource.buffer = b; // connect to output (your speakers)\n\n      tempSource.connect(me.audioContext.destination); // play the temp file\n\n      tempSource.start(0); // now play the returned tts\n      // me.eventService.audioPlaying.emit();\n      // me.ioService.sendMessage('tts', { text:this.text_me,audio:{language:''} });\n    }\n    /**\r\n     * When Dialogflow matched an intent,\r\n     * return an audio buffer to play this sound output.\r\n     */\n\n\n    playOutput(arrayBuffer) {\n      let me = this;\n      me.eventService.setIsPlaying(true);\n\n      try {\n        if (arrayBuffer.byteLength > 0) {\n          me.audioContext.decodeAudioData(arrayBuffer, function (buffer) {\n            me.audioContext.resume();\n            me.outputSource = me.audioContext.createBufferSource();\n            me.outputSource.buffer = buffer;\n            me.outputSource.connect(me.audioContext.destination);\n            me.outputSource.start(0);\n\n            me.outputSource.onended = function () {\n              // we need the timeout, because of the timeslice in mic.\n              setTimeout(function () {\n                me.eventService.audioStopping.emit(true);\n                me.eventService.setIsPlaying(false);\n              }, 500);\n            };\n          }, function () {\n            console.log(arguments);\n          });\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    }\n    /**\r\n     * Stop audio\r\n     */\n\n\n    stopOutput() {\n      try {\n        this.outputSource.disconnect();\n      } catch (_a) {\n        console.log('couldent shut off tts or tts already shut');\n      }\n\n      this.eventService.audioStopping.emit(true);\n      this.eventService.setIsPlaying(false);\n    }\n\n  }\n\n  TtsComponent.ɵfac = function TtsComponent_Factory(t) {\n    return new (t || TtsComponent)(i0.ɵɵdirectiveInject(i1.IoService), i0.ɵɵdirectiveInject(i2.EventService));\n  };\n\n  TtsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TtsComponent,\n    selectors: [[\"app-tts\"]],\n    decls: 0,\n    vars: 0,\n    template: function TtsComponent_Template(rf, ctx) {},\n    styles: [\"\"]\n  });\n  return TtsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}