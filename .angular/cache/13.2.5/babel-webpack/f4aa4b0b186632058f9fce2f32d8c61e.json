{"ast":null,"code":"import * as io from 'socket.io-client';\nexport class IoService {\n  constructor() {\n    this.streamcount = 0;\n    this.socketio = io('', {\n      path: '/socket.io/socket.io'\n    });\n    this.socket = this.socketio.on('connect', function () {\n      console.log('connected');\n    });\n    this.socket.binaryType = 'arraybuffer';\n    this.lang = 'en-IN';\n  }\n\n  setDefaultLanguage(lang) {\n    this.lang = lang;\n  }\n\n  sendBinaryStream(blob, speechContext) {\n    this.streamcount++;\n    const me = this;\n    const stream = ss.createStream(); // stream directly to server\n    // it will be temp. stored locally\n\n    ss(me.socket).emit('stream-speech', stream, {\n      name: '_temp/stream' + this.streamcount + '.wav',\n      size: blob.size,\n      language: me.lang,\n      speechContext: speechContext\n    }); // pipe the audio blob to the read stream\n\n    ss.createBlobReadStream(blob).pipe(stream);\n  }\n\n  sendMessage(eventName, obj) {\n    obj.audio.language = this.lang;\n    this.socketio.emit(eventName, obj);\n  }\n\n  receiveStream(eventName, callback) {\n    this.socket.on(eventName, function (data) {\n      callback(data);\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}