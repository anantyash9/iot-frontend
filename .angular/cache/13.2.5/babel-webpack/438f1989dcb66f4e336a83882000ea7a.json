{"ast":null,"code":"import SiriWave from \"siriwave\";\nimport * as i0 from \"@angular/core\";\nexport let WaveComponent = /*#__PURE__*/(() => {\n  class WaveComponent {\n    constructor() {}\n\n    ngOnInit() {\n      this.run();\n    }\n\n    run() {\n      var taskHandle = 0;\n      var spectrum, dBASpectrum;\n      var source = undefined; // A-weighting\n      // https://www.softdb.com/difference-between-db-dba/\n      // https://en.wikipedia.org/wiki/A-weighting\n\n      var RA = f => Math.pow(12194, 2) * Math.pow(f, 4) / ((Math.pow(f, 2) + Math.pow(20.6, 2)) * Math.sqrt((Math.pow(f, 2) + Math.pow(107.7, 2)) * (Math.pow(f, 2) + Math.pow(737.9, 2))) * (Math.pow(f, 2) + Math.pow(12194, 2))),\n          A = f => 20 * Math.log10(RA(f)) + 2.0;\n\n      var siriWave = new SiriWave({\n        container: document.getElementById(\"siri-container\"),\n        cover: true,\n        width: this.width,\n        height: this.hight,\n        color: this.color,\n        curveDefinition: [{\n          attenuation: -2,\n          lineWidth: this.lineWidth,\n          opacity: 0.1\n        }, {\n          attenuation: -6,\n          lineWidth: this.lineWidth * 1.5,\n          opacity: 0.2\n        }, {\n          attenuation: 4,\n          lineWidth: this.lineWidth * 1.5,\n          opacity: 0.4\n        }, {\n          attenuation: 2,\n          lineWidth: this.lineWidth * 1.5,\n          opacity: 0.6\n        }, {\n          attenuation: 1,\n          lineWidth: this.lineWidth * 1.5,\n          opacity: 1\n        }]\n      });\n      const audioStream = navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }); // Note that the visualisation itself is animated with fps_ani = 60 Hz ↷ interval_ani = 17 msec\n      // ν\n\n      const approxVisualisationUpdateFrequency = 20; // total sample time T = 1 / ν\n      // sampling rate f\n      // total number of samples N = f ∙ T\n\n      audioStream.then(stream => Promise.all([stream, navigator.mediaDevices.enumerateDevices()])).then(([stream, devices]) => {\n        //context depending on browser(Chrome/Firefox)\n        let context = new (window['AudioContext'] || window['webkitAudioContext'])(); //create source for sound input.\n\n        source = context.createMediaStreamSource(stream); //create analyser node.\n\n        let analyser = context.createAnalyser();\n        const trackSettings = stream.getAudioTracks()[0].getSettings(),\n              sampleRate = trackSettings.sampleRate || context.sampleRate,\n              // Firefox does not support trackSettings.sampleRate\n        deviceName = devices.find(device => device.deviceId === trackSettings.deviceId).label;\n        console.log(`sample rate: ${sampleRate} Hz, \n      audio context sample rate: ${context.sampleRate} Hz,\n      dynamic: ${trackSettings.sampleSize} bit\n      device: ${deviceName}`);\n        let totalNumberOfSamples = sampleRate / approxVisualisationUpdateFrequency; // e.g. 48000 / 5 = 9600\n\n        analyser.fftSize = Math.pow(2, Math.floor(Math.log2(totalNumberOfSamples)));\n\n        const uint8TodB = byteLevel => byteLevel / 255 * (analyser.maxDecibels - analyser.minDecibels) + analyser.minDecibels;\n\n        console.log(`frequency bins: ${analyser.frequencyBinCount}`);\n        const weightings = [-100];\n\n        for (let i = 1; i < analyser.frequencyBinCount; i++) {\n          weightings[i] = A(i * sampleRate / 2 / analyser.frequencyBinCount);\n        } //array for frequency data.\n        // holds Number.NEGATIVE_INFINITY, [0 = -100dB, ..., 255 = -30 dB]\n\n\n        spectrum = new Uint8Array(analyser.frequencyBinCount);\n        dBASpectrum = new Float32Array(analyser.frequencyBinCount);\n        let waveForm = new Uint8Array(analyser.frequencyBinCount); //connect source->analyser->destination.\n\n        source.connect(analyser); // noisy feedback loop if we put the mic on the speakers \n        //analyser.connect(context.destination);\n\n        siriWave.start();\n\n        const updateAnimation = function (idleDeadline) {\n          taskHandle = requestAnimationFrame(updateAnimation); //copy frequency data to spectrum from analyser.\n          // holds Number.NEGATIVE_INFINITY, [0 = -100dB, ..., 255 = -30 dB]\n\n          analyser.getByteFrequencyData(spectrum);\n          spectrum.forEach((byteLevel, idx) => {\n            dBASpectrum[idx] = uint8TodB(byteLevel) + weightings[idx];\n          });\n          const highestPerceptibleFrequencyBin = dBASpectrum.reduce((acc, y, idx) => y > -90 ? idx : acc, 0),\n                // S = ∑ s_i\n          totaldBAPower = dBASpectrum.reduce((acc, y) => acc + y),\n                // s⍉ = ∑ s_i ∙ i / ∑ s_i\n          meanFrequencyBin = dBASpectrum.reduce((acc, y, idx) => acc + y * idx) / totaldBAPower,\n                highestPowerBin = dBASpectrum.reduce(([maxPower, iMax], y, idx) => y > maxPower ? [y, idx] : [maxPower, iMax], [-120, 0])[1],\n                highestDetectedFrequency = highestPerceptibleFrequencyBin * (sampleRate / 2 / analyser.frequencyBinCount),\n                meanFrequency = meanFrequencyBin * (sampleRate / 2 / analyser.frequencyBinCount),\n                maxPowerFrequency = highestPowerBin * (sampleRate / 2 / analyser.frequencyBinCount); //set the speed for siriwave\n          // scaled to [0..22kHz] -> [0..1]\n\n          siriWave.setSpeed(maxPowerFrequency / 10e+3);\n          const averagedBAPower = totaldBAPower / analyser.frequencyBinCount; // for fun use raf to update the screen\n          // requestAnimationFrame(() => {\n          //   energyElement.textContent = averagedBAPower.toFixed(2);\n          //   frequencyElement.textContent = highestDetectedFrequency.toFixed(0);\n          //   meanFrequencyElement.textContent = meanFrequency.toFixed(0);\n          //   maxPowerElement.textContent = maxPowerFrequency.toFixed(0);\n          // });\n          //find the max amplituded\n          // the zero level is at 128\n\n          analyser.getByteTimeDomainData(waveForm); // find the maximum not considering negative values (without loss of generality)\n\n          const amplitude = waveForm.reduce((acc, y) => Math.max(acc, y), 128) - 128; //scale amplituded from [0, 128] to [0, 10].\n\n          siriWave.setAmplitude(amplitude / 128 * 10 / 5);\n        };\n\n        taskHandle = requestAnimationFrame(updateAnimation);\n      });\n    }\n\n  }\n\n  WaveComponent.ɵfac = function WaveComponent_Factory(t) {\n    return new (t || WaveComponent)();\n  };\n\n  WaveComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WaveComponent,\n    selectors: [[\"app-wave\"]],\n    inputs: {\n      color: \"color\",\n      hight: \"hight\",\n      width: \"width\",\n      lineWidth: \"lineWidth\"\n    },\n    decls: 1,\n    vars: 0,\n    consts: [[\"id\", \"siri-container\"]],\n    template: function WaveComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n    },\n    styles: [\"\"]\n  });\n  return WaveComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}