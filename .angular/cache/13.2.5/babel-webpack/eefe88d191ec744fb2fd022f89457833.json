{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let StyleManagerService = /*#__PURE__*/(() => {\n  class StyleManagerService {\n    constructor() {}\n    /**\r\n     * Set the stylesheet with the specified key.\r\n     */\n\n\n    setStyle(key, href) {\n      getLinkElementForKey(key).setAttribute(\"href\", href);\n    }\n    /**\r\n     * Remove the stylesheet with the specified key.\r\n     */\n\n\n    removeStyle(key) {\n      const existingLinkElement = getExistingLinkElementByKey(key);\n\n      if (existingLinkElement) {\n        document.head.removeChild(existingLinkElement);\n      }\n    }\n\n  }\n\n  StyleManagerService.ɵfac = function StyleManagerService_Factory(t) {\n    return new (t || StyleManagerService)();\n  };\n\n  StyleManagerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StyleManagerService,\n    factory: StyleManagerService.ɵfac\n  });\n  return StyleManagerService;\n})();\n\nfunction getLinkElementForKey(key) {\n  return getExistingLinkElementByKey(key) || createLinkElementWithKey(key);\n}\n\nfunction getExistingLinkElementByKey(key) {\n  return document.head.querySelector(`link[rel=\"stylesheet\"].${getClassNameForKey(key)}`);\n}\n\nfunction createLinkElementWithKey(key) {\n  const linkEl = document.createElement(\"link\");\n  linkEl.setAttribute(\"rel\", \"stylesheet\");\n  linkEl.classList.add(getClassNameForKey(key));\n  document.head.appendChild(linkEl);\n  return linkEl;\n}\n\nfunction getClassNameForKey(key) {\n  return `app-${key}`;\n}","map":null,"metadata":{},"sourceType":"module"}